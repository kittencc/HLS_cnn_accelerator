// ----------------------------------------------------------------------------
// SystemC Testbench Body
//
//    HLS version: 10.4b/841621 Production Release
//       HLS date: Thu Oct 24 17:20:07 PDT 2019
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: ctorng@caddy01
// Generated date: Sat Oct 01 16:51:16 PDT 2022
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// mc_testbench
// SCVerify mc_testbench SC_MODULE
// -------------------------------------
// 
#include "mc_testbench.h"
#include <mc_testbench_util.h>
#include <mc_simulator_extensions.h>

mc_testbench* mc_testbench::that;
bool testbench::enable_idle_sync_mode;
unsigned short testbench::idle_sync_stable_cycles;
void testbench::set_enable_stalls(bool flag) { mc_testbench::set_enable_stalls(flag); }
void testbench::reset_request() { mc_testbench::that->reset_request(); }
void mc_testbench_reset_request() { mc_testbench::that->reset_request(); }
bool testbench::input_serial_ignore;
void mc_testbench_input_serial_skip(bool v) { testbench::input_serial_skip = v; }
bool testbench::input_serial_skip;
bool testbench::input_serial_skip_quiet;
bool testbench::input_serial_skip_once;
bool testbench::input_serial_skip_noerr;
int  testbench::input_serial_array_comp_first;
int  testbench::input_serial_array_comp_last;
mc_wait_ctrl testbench::input_serial_wait_ctrl;
bool testbench::weight_serial_ignore;
void mc_testbench_weight_serial_skip(bool v) { testbench::weight_serial_skip = v; }
bool testbench::weight_serial_skip;
bool testbench::weight_serial_skip_quiet;
bool testbench::weight_serial_skip_once;
bool testbench::weight_serial_skip_noerr;
int  testbench::weight_serial_array_comp_first;
int  testbench::weight_serial_array_comp_last;
mc_wait_ctrl testbench::weight_serial_wait_ctrl;
bool testbench::output_serial_ignore;
void mc_testbench_output_serial_skip(bool v) { testbench::output_serial_skip = v; }
bool testbench::output_serial_skip;
bool testbench::output_serial_skip_quiet;
bool testbench::output_serial_skip_once;
bool testbench::output_serial_skip_noerr;
int  testbench::output_serial_array_comp_first;
int  testbench::output_serial_array_comp_last;
bool testbench::output_serial_use_mask;
ac_int<16, true > testbench::output_serial_output_mask;
mc_wait_ctrl testbench::output_serial_wait_ctrl;
bool testbench::paramsIn_ignore;
void mc_testbench_paramsIn_skip(bool v) { testbench::paramsIn_skip = v; }
bool testbench::paramsIn_skip;
bool testbench::paramsIn_skip_quiet;
bool testbench::paramsIn_skip_once;
bool testbench::paramsIn_skip_noerr;
int  testbench::paramsIn_array_comp_first;
int  testbench::paramsIn_array_comp_last;
mc_wait_ctrl testbench::paramsIn_wait_ctrl;
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
void testbench::exec_run( ac_channel<ac_int<8, true > > &input_serial,  ac_channel<ac_int<8, true > > &weight_serial,  ac_channel<ac_int<16, true > > &output_serial,  ac_channel<ac_int<16, false > > &paramsIn) {
   return mc_testbench::exec_run(input_serial, weight_serial, output_serial, paramsIn);
}
#endif

// ============================================
// Function: wait_for_idle_sync
// --------------------------------------------

void mc_testbench::wait_for_idle_sync()
{
   if (testbench::enable_idle_sync_mode) {
      std::cout << "mc_testbench STOPPING   @ " << sc_time_stamp() << std::endl;
      that->cpp_testbench_active.write(false);
      while (that->design_is_idle.read())  that->wait(that->design_is_idle.value_changed_event());
      while (!that->design_is_idle.read()) that->wait(that->design_is_idle.value_changed_event());
      that->cpp_testbench_active.write(true);
      std::cout << "mc_testbench CONTINUING @ " << sc_time_stamp() << std::endl;
   } else {
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: set_enable_stalls
// --------------------------------------------

void mc_testbench::set_enable_stalls(bool flag)
{
   if (flag) {
     std::cout << "Enabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_1);
   } else {
     std::cout << "Disabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_0);
   }
}
// ============================================
// Function: reset_request
// --------------------------------------------

void mc_testbench::reset_request()
{
   reset_request_event.notify(0,SC_NS);
}
// ============================================
// Function: capture_input_serial
// --------------------------------------------

void mc_testbench::capture_input_serial( ac_channel<ac_int<8, true > > &input_serial)
{
   static ac_int<8, true > input_serial_tmp;
   static int last_j_input_serial_in = 0;
   if (input_serial_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_input_serial && !testbench::input_serial_ignore)
   {
      int cur_iter = input_serial_capture_count;
      ++input_serial_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_input_serial;
      while (ccs_scv_i < input_serial.ac_channel<ac_int<8, true > >::debug_size()) {
         for (ccs_scv_j = last_j_input_serial_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < input_serial.ac_channel<ac_int<8, true > >::debug_size()) {
               input_serial_tmp = input_serial.ac_channel<ac_int<8, true > >::chan[ccs_scv_i];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_input_serial->put(input_serial_tmp);
            last_j_input_serial_in = 0;
            input_serial_capture_count += chan_factor;
         } else {
            last_j_input_serial_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("input_serial",testbench::input_serial_wait_ctrl,ccs_wait_ctrl_input_serial.operator->(),cur_iter,input_serial_capture_count,1);
   }
   testbench::input_serial_ignore = false;
}
// ============================================
// Function: capture_weight_serial
// --------------------------------------------

void mc_testbench::capture_weight_serial( ac_channel<ac_int<8, true > > &weight_serial)
{
   static ac_int<8, true > weight_serial_tmp;
   static int last_j_weight_serial_in = 0;
   if (weight_serial_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_weight_serial && !testbench::weight_serial_ignore)
   {
      int cur_iter = weight_serial_capture_count;
      ++weight_serial_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_weight_serial;
      while (ccs_scv_i < weight_serial.ac_channel<ac_int<8, true > >::debug_size()) {
         for (ccs_scv_j = last_j_weight_serial_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < weight_serial.ac_channel<ac_int<8, true > >::debug_size()) {
               weight_serial_tmp = weight_serial.ac_channel<ac_int<8, true > >::chan[ccs_scv_i];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_weight_serial->put(weight_serial_tmp);
            last_j_weight_serial_in = 0;
            weight_serial_capture_count += chan_factor;
         } else {
            last_j_weight_serial_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("weight_serial",testbench::weight_serial_wait_ctrl,ccs_wait_ctrl_weight_serial.operator->(),cur_iter,weight_serial_capture_count,1);
   }
   testbench::weight_serial_ignore = false;
}
// ============================================
// Function: capture_output_serial
// --------------------------------------------

void mc_testbench::capture_output_serial( ac_channel<ac_int<16, true > > &output_serial)
{
   static mc_golden_info< ac_int<16, true >, ac_int<16, true > > output_serial_tmp(testbench::output_serial_ignore, false, output_serial_iteration_count);
   output_serial_tmp._ignore = testbench::output_serial_ignore;
   output_serial_tmp._iteration = output_serial_iteration_count;
   static int last_j_output_serial_out = 0;
   if (_capture_output_serial)
   {
      int cur_iter = output_serial_capture_count;
      ++output_serial_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_output_serial_golden;
      while (ccs_scv_i < output_serial.ac_channel<ac_int<16, true > >::debug_size()) {
         for (ccs_scv_j = last_j_output_serial_out; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < output_serial.ac_channel<ac_int<16, true > >::debug_size()) {
               output_serial_tmp._data = output_serial.ac_channel<ac_int<16, true > >::chan[ccs_scv_i];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            output_serial_golden.put(output_serial_tmp);
            last_j_output_serial_out = 0;
            output_serial_capture_count += chan_factor;
         } else {
            last_j_output_serial_out = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("output_serial",testbench::output_serial_wait_ctrl,ccs_wait_ctrl_output_serial.operator->(),cur_iter,output_serial_capture_count,1);
      testbench::output_serial_use_mask = false;
   }
   testbench::output_serial_ignore = false;
   testbench::output_serial_skip = false;
}
// ============================================
// Function: capture_paramsIn
// --------------------------------------------

void mc_testbench::capture_paramsIn( ac_channel<ac_int<16, false > > &paramsIn)
{
   static ac_int<16, false > paramsIn_tmp;
   static int last_j_paramsIn_in = 0;
   if (paramsIn_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_paramsIn && !testbench::paramsIn_ignore)
   {
      int cur_iter = paramsIn_capture_count;
      ++paramsIn_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn;
      while (ccs_scv_i < paramsIn.ac_channel<ac_int<16, false > >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<ac_int<16, false > >::debug_size()) {
               paramsIn_tmp = paramsIn.ac_channel<ac_int<16, false > >::chan[ccs_scv_i];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn->put(paramsIn_tmp);
            last_j_paramsIn_in = 0;
            paramsIn_capture_count += chan_factor;
         } else {
            last_j_paramsIn_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn",testbench::paramsIn_wait_ctrl,ccs_wait_ctrl_paramsIn.operator->(),cur_iter,paramsIn_capture_count,1);
   }
   testbench::paramsIn_ignore = false;
}
// ============================================
// Function: wait_on_input_required
// --------------------------------------------

void mc_testbench::wait_on_input_required()
{
   ++wait_cnt;
   wait(SC_ZERO_TIME); // get fifos a chance to update
   while (atleast_one_active_input) {
      if (_capture_input_serial && ccs_input_serial->used() == 0) return;
      if (_capture_weight_serial && ccs_weight_serial->used() == 0) return;
      if (_capture_paramsIn && ccs_paramsIn->used() == 0) return;
      that->cpp_testbench_active.write(false);
      wait(ccs_input_serial->ok_to_put() | ccs_weight_serial->ok_to_put() | ccs_paramsIn->ok_to_put());
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: capture_IN
// --------------------------------------------

void mc_testbench::capture_IN( ac_channel<ac_int<8, true > > &input_serial,  ac_channel<ac_int<8, true > > &weight_serial,  ac_channel<ac_int<16, true > > &output_serial,  ac_channel<ac_int<16, false > > &paramsIn)
{
   that->capture_input_serial(input_serial);
   that->capture_weight_serial(weight_serial);
   that->remaining_output_serial_golden =  output_serial.ac_channel<ac_int<16, true > >::debug_size();
   that->capture_paramsIn(paramsIn);
}
// ============================================
// Function: capture_OUT
// --------------------------------------------

void mc_testbench::capture_OUT( ac_channel<ac_int<8, true > > &input_serial,  ac_channel<ac_int<8, true > > &weight_serial,  ac_channel<ac_int<16, true > > &output_serial,  ac_channel<ac_int<16, false > > &paramsIn)
{
   that->remaining_ccs_input_serial =  input_serial.ac_channel<ac_int<8, true > >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_input_serial != 0) {
      cout << "Warning: Testbench input channel 'input_serial' not empty. Remaining size: " << that->remaining_ccs_input_serial << endl;
   }
   that->remaining_ccs_weight_serial =  weight_serial.ac_channel<ac_int<8, true > >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_weight_serial != 0) {
      cout << "Warning: Testbench input channel 'weight_serial' not empty. Remaining size: " << that->remaining_ccs_weight_serial << endl;
   }
   that->capture_output_serial(output_serial);
   that->remaining_ccs_paramsIn =  paramsIn.ac_channel<ac_int<16, false > >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn << endl;
   }
}
// ============================================
// Function: exec_run
// --------------------------------------------

void mc_testbench::exec_run( ac_channel<ac_int<8, true > > &input_serial,  ac_channel<ac_int<8, true > > &weight_serial,  ac_channel<ac_int<16, true > > &output_serial,  ac_channel<ac_int<16, false > > &paramsIn)
{
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   that->cpp_testbench_active.write(true);
   capture_IN(input_serial, weight_serial, output_serial, paramsIn);
   Conv::run(input_serial, weight_serial, output_serial, paramsIn);
   // throttle ac_channel based on number of calls to chan::size() or chan::empty() or chan::nb_read() (but not chan::available()) 
   if (1) {
      int cnt=0;
      if (cnt) std::cout << "mc_testbench.cpp: CONTINUES @ " << sc_time_stamp() << std::endl;
      if (cnt) that->cpp_testbench_active.write(true);
   }
   capture_OUT(input_serial, weight_serial, output_serial, paramsIn);
   #else
   #endif
}
// ============================================
// Function: start_of_simulation
// --------------------------------------------

void mc_testbench::start_of_simulation()
{
   set_enable_stalls(false);
}
// ============================================
// Function: end_of_simulation
// --------------------------------------------

void mc_testbench::end_of_simulation()
{
   if (!_checked_results) {
      SC_REPORT_INFO(name(), "Simulation ran into deadlock");
      check_results();
   }
}
// ============================================
// Function: check_results
// --------------------------------------------

void mc_testbench::check_results()
{
   if (_checked_results) return;
   _checked_results = true;
   cout<<endl;
   cout<<"Checking results"<<endl;
   if (main_exit_code) _failed = true;
   int _num_outputs_checked = 0;
   bool _has_capture_counts = false;
   std::ostringstream mctb_msg;
   
   if (!_capture_output_serial) {
      cout<<"'output_serial' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      _failed |= output_serial_comp->check_results(output_serial_capture_count,testbench::output_serial_skip_noerr);
      _has_capture_counts |= !!(output_serial_capture_count);
   }
   cout<<endl;
   if (_num_outputs_checked == 0) {
      cout<<"Error: All outputs were optimized away. No output values were compared."<<endl;
      _failed = _failed || (_num_outputs_checked == 0);
   }
   if (!_has_capture_counts) {
      cout<<"Error: Nothing to compare, all output capture counts are zero."<<endl;
      _failed = true;
   }
   if (main_exit_code) cout << "Error: C++ Testbench 'main()' returned a non-zero exit code ("<<main_exit_code<<"). Check your testbench." <<endl;
   mctb_msg.clear();
   if (_failed) mctb_msg << "Simulation FAILED";
   else         mctb_msg << "Simulation PASSED";
   mctb_msg << " @ " << sc_time_stamp();
   SC_REPORT_INFO(this->name(), mctb_msg.str().c_str());
}
// ============================================
// Function: failed
// --------------------------------------------

bool mc_testbench::failed()
{
   return _failed;
}
// ============================================
// Function: set_failed
// --------------------------------------------

void mc_testbench::set_failed(bool fail)
{
   _failed = fail;
}
// ---------------------------------------------------------------
// Process: SC_METHOD wait_for_end
// Static sensitivity: sensitive << clk.pos() << testbench_end_event;

void mc_testbench::wait_for_end() {
   // If run() has not finished, we do nothing here
   if (!testbench_ended) return;
   // check for completed outputs
   if (output_serial_comp->get_compare_count() < output_serial_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   // If we made it here, all outputs have flushed. Check the results
   SC_REPORT_INFO(name(), "Simulation completed");
   check_results();
   sc_stop();
}
// ---------------------------------------------------------------
// Process: SC_THREAD run
// Static sensitivity: 

void mc_testbench::run() {
   testbench::enable_idle_sync_mode = false;
   testbench::idle_sync_stable_cycles = 1;
   testbench::input_serial_ignore = false;
   testbench::input_serial_skip = false;
   testbench::input_serial_skip_quiet = false;
   testbench::input_serial_skip_once = false;
   testbench::input_serial_skip_noerr = false;
   testbench::input_serial_array_comp_first = -1;
   testbench::input_serial_array_comp_last = -1;
   testbench::input_serial_wait_ctrl.clear();
   input_serial_capture_count = 0;
   input_serial_iteration_count = 0;
   testbench::weight_serial_ignore = false;
   testbench::weight_serial_skip = false;
   testbench::weight_serial_skip_quiet = false;
   testbench::weight_serial_skip_once = false;
   testbench::weight_serial_skip_noerr = false;
   testbench::weight_serial_array_comp_first = -1;
   testbench::weight_serial_array_comp_last = -1;
   testbench::weight_serial_wait_ctrl.clear();
   weight_serial_capture_count = 0;
   weight_serial_iteration_count = 0;
   testbench::output_serial_ignore = false;
   testbench::output_serial_skip = false;
   testbench::output_serial_skip_quiet = false;
   testbench::output_serial_skip_once = false;
   testbench::output_serial_skip_noerr = false;
   testbench::output_serial_array_comp_first = -1;
   testbench::output_serial_array_comp_last = -1;
   testbench::output_serial_use_mask = false;
   testbench::output_serial_output_mask = ~0;
   testbench::output_serial_wait_ctrl.clear();
   output_serial_capture_count = 0;
   output_serial_iteration_count = 0;
   testbench::paramsIn_ignore = false;
   testbench::paramsIn_skip = false;
   testbench::paramsIn_skip_quiet = false;
   testbench::paramsIn_skip_once = false;
   testbench::paramsIn_skip_noerr = false;
   testbench::paramsIn_array_comp_first = -1;
   testbench::paramsIn_array_comp_last = -1;
   testbench::paramsIn_wait_ctrl.clear();
   paramsIn_capture_count = 0;
   paramsIn_iteration_count = 0;
   testbench testbench_inst(sc_argc(), sc_argv());
   main_exit_code = testbench_inst.main();
   cout<<"Info: Execution of user-supplied C++ testbench 'main()' has completed with exit code = " << main_exit_code << endl;
   cout<<endl;
   cout<<"Info: Collecting data completed"<<endl;
   cout<<"   captured "<<input_serial_capture_count<<" values of input_serial"<<endl;
   cout<<"   captured "<<weight_serial_capture_count<<" values of weight_serial"<<endl;
   cout<<"   captured "<<output_serial_capture_count<<" values of output_serial"<<endl;
   cout<<"   captured "<<paramsIn_capture_count<<" values of paramsIn"<<endl;
   testbench_ended = true;
   testbench_end_event.notify(SC_ZERO_TIME);
}
#ifdef CCS_SCVERIFY_USE_CCS_BLOCK
#include "ccs_block_macros.cpp"
#endif
