// ----------------------------------------------------------------------------
// SystemC Testbench Body
//
//    HLS version: 10.4b/841621 Production Release
//       HLS date: Thu Oct 24 17:20:07 PDT 2019
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: ctorng@caddy01
// Generated date: Sun Sep 25 22:03:24 PDT 2022
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// mc_testbench
// SCVerify mc_testbench SC_MODULE
// -------------------------------------
// 
#include "mc_testbench.h"
#include <mc_testbench_util.h>
#include <mc_simulator_extensions.h>

mc_testbench* mc_testbench::that;
bool testbench::enable_idle_sync_mode;
unsigned short testbench::idle_sync_stable_cycles;
void testbench::set_enable_stalls(bool flag) { mc_testbench::set_enable_stalls(flag); }
void testbench::reset_request() { mc_testbench::that->reset_request(); }
void mc_testbench_reset_request() { mc_testbench::that->reset_request(); }
bool testbench::input_value_ignore;
void mc_testbench_input_value_skip(bool v) { testbench::input_value_skip = v; }
bool testbench::input_value_skip;
bool testbench::input_value_skip_quiet;
bool testbench::input_value_skip_once;
bool testbench::input_value_skip_noerr;
int  testbench::input_value_array_comp_first;
int  testbench::input_value_array_comp_last;
mc_wait_ctrl testbench::input_value_wait_ctrl;
bool testbench::weight_value_ignore;
void mc_testbench_weight_value_skip(bool v) { testbench::weight_value_skip = v; }
bool testbench::weight_value_skip;
bool testbench::weight_value_skip_quiet;
bool testbench::weight_value_skip_once;
bool testbench::weight_value_skip_noerr;
int  testbench::weight_value_array_comp_first;
int  testbench::weight_value_array_comp_last;
mc_wait_ctrl testbench::weight_value_wait_ctrl;
bool testbench::output_value_ignore;
void mc_testbench_output_value_skip(bool v) { testbench::output_value_skip = v; }
bool testbench::output_value_skip;
bool testbench::output_value_skip_quiet;
bool testbench::output_value_skip_once;
bool testbench::output_value_skip_noerr;
int  testbench::output_value_array_comp_first;
int  testbench::output_value_array_comp_last;
bool testbench::output_value_use_mask;
ac_int<16, true > testbench::output_value_output_mask;
mc_wait_ctrl testbench::output_value_wait_ctrl;
bool testbench::paramsIn_OY1_ignore;
void mc_testbench_paramsIn_OY1_skip(bool v) { testbench::paramsIn_OY1_skip = v; }
bool testbench::paramsIn_OY1_skip;
bool testbench::paramsIn_OY1_skip_quiet;
bool testbench::paramsIn_OY1_skip_once;
bool testbench::paramsIn_OY1_skip_noerr;
int  testbench::paramsIn_OY1_array_comp_first;
int  testbench::paramsIn_OY1_array_comp_last;
mc_wait_ctrl testbench::paramsIn_OY1_wait_ctrl;
bool testbench::paramsIn_OX1_ignore;
void mc_testbench_paramsIn_OX1_skip(bool v) { testbench::paramsIn_OX1_skip = v; }
bool testbench::paramsIn_OX1_skip;
bool testbench::paramsIn_OX1_skip_quiet;
bool testbench::paramsIn_OX1_skip_once;
bool testbench::paramsIn_OX1_skip_noerr;
int  testbench::paramsIn_OX1_array_comp_first;
int  testbench::paramsIn_OX1_array_comp_last;
mc_wait_ctrl testbench::paramsIn_OX1_wait_ctrl;
bool testbench::paramsIn_OY0_ignore;
void mc_testbench_paramsIn_OY0_skip(bool v) { testbench::paramsIn_OY0_skip = v; }
bool testbench::paramsIn_OY0_skip;
bool testbench::paramsIn_OY0_skip_quiet;
bool testbench::paramsIn_OY0_skip_once;
bool testbench::paramsIn_OY0_skip_noerr;
int  testbench::paramsIn_OY0_array_comp_first;
int  testbench::paramsIn_OY0_array_comp_last;
mc_wait_ctrl testbench::paramsIn_OY0_wait_ctrl;
bool testbench::paramsIn_OX0_ignore;
void mc_testbench_paramsIn_OX0_skip(bool v) { testbench::paramsIn_OX0_skip = v; }
bool testbench::paramsIn_OX0_skip;
bool testbench::paramsIn_OX0_skip_quiet;
bool testbench::paramsIn_OX0_skip_once;
bool testbench::paramsIn_OX0_skip_noerr;
int  testbench::paramsIn_OX0_array_comp_first;
int  testbench::paramsIn_OX0_array_comp_last;
mc_wait_ctrl testbench::paramsIn_OX0_wait_ctrl;
bool testbench::paramsIn_OC1_ignore;
void mc_testbench_paramsIn_OC1_skip(bool v) { testbench::paramsIn_OC1_skip = v; }
bool testbench::paramsIn_OC1_skip;
bool testbench::paramsIn_OC1_skip_quiet;
bool testbench::paramsIn_OC1_skip_once;
bool testbench::paramsIn_OC1_skip_noerr;
int  testbench::paramsIn_OC1_array_comp_first;
int  testbench::paramsIn_OC1_array_comp_last;
mc_wait_ctrl testbench::paramsIn_OC1_wait_ctrl;
bool testbench::paramsIn_IC1_ignore;
void mc_testbench_paramsIn_IC1_skip(bool v) { testbench::paramsIn_IC1_skip = v; }
bool testbench::paramsIn_IC1_skip;
bool testbench::paramsIn_IC1_skip_quiet;
bool testbench::paramsIn_IC1_skip_once;
bool testbench::paramsIn_IC1_skip_noerr;
int  testbench::paramsIn_IC1_array_comp_first;
int  testbench::paramsIn_IC1_array_comp_last;
mc_wait_ctrl testbench::paramsIn_IC1_wait_ctrl;
bool testbench::paramsIn_FX_ignore;
void mc_testbench_paramsIn_FX_skip(bool v) { testbench::paramsIn_FX_skip = v; }
bool testbench::paramsIn_FX_skip;
bool testbench::paramsIn_FX_skip_quiet;
bool testbench::paramsIn_FX_skip_once;
bool testbench::paramsIn_FX_skip_noerr;
int  testbench::paramsIn_FX_array_comp_first;
int  testbench::paramsIn_FX_array_comp_last;
mc_wait_ctrl testbench::paramsIn_FX_wait_ctrl;
bool testbench::paramsIn_FY_ignore;
void mc_testbench_paramsIn_FY_skip(bool v) { testbench::paramsIn_FY_skip = v; }
bool testbench::paramsIn_FY_skip;
bool testbench::paramsIn_FY_skip_quiet;
bool testbench::paramsIn_FY_skip_once;
bool testbench::paramsIn_FY_skip_noerr;
int  testbench::paramsIn_FY_array_comp_first;
int  testbench::paramsIn_FY_array_comp_last;
mc_wait_ctrl testbench::paramsIn_FY_wait_ctrl;
bool testbench::paramsIn_STRIDE_ignore;
void mc_testbench_paramsIn_STRIDE_skip(bool v) { testbench::paramsIn_STRIDE_skip = v; }
bool testbench::paramsIn_STRIDE_skip;
bool testbench::paramsIn_STRIDE_skip_quiet;
bool testbench::paramsIn_STRIDE_skip_once;
bool testbench::paramsIn_STRIDE_skip_noerr;
int  testbench::paramsIn_STRIDE_array_comp_first;
int  testbench::paramsIn_STRIDE_array_comp_last;
mc_wait_ctrl testbench::paramsIn_STRIDE_wait_ctrl;
bool testbench::loopIndicesIn_ic1_idx_ignore;
void mc_testbench_loopIndicesIn_ic1_idx_skip(bool v) { testbench::loopIndicesIn_ic1_idx_skip = v; }
bool testbench::loopIndicesIn_ic1_idx_skip;
bool testbench::loopIndicesIn_ic1_idx_skip_quiet;
bool testbench::loopIndicesIn_ic1_idx_skip_once;
bool testbench::loopIndicesIn_ic1_idx_skip_noerr;
int  testbench::loopIndicesIn_ic1_idx_array_comp_first;
int  testbench::loopIndicesIn_ic1_idx_array_comp_last;
mc_wait_ctrl testbench::loopIndicesIn_ic1_idx_wait_ctrl;
bool testbench::loopIndicesIn_fx_idx_ignore;
void mc_testbench_loopIndicesIn_fx_idx_skip(bool v) { testbench::loopIndicesIn_fx_idx_skip = v; }
bool testbench::loopIndicesIn_fx_idx_skip;
bool testbench::loopIndicesIn_fx_idx_skip_quiet;
bool testbench::loopIndicesIn_fx_idx_skip_once;
bool testbench::loopIndicesIn_fx_idx_skip_noerr;
int  testbench::loopIndicesIn_fx_idx_array_comp_first;
int  testbench::loopIndicesIn_fx_idx_array_comp_last;
mc_wait_ctrl testbench::loopIndicesIn_fx_idx_wait_ctrl;
bool testbench::loopIndicesIn_fy_idx_ignore;
void mc_testbench_loopIndicesIn_fy_idx_skip(bool v) { testbench::loopIndicesIn_fy_idx_skip = v; }
bool testbench::loopIndicesIn_fy_idx_skip;
bool testbench::loopIndicesIn_fy_idx_skip_quiet;
bool testbench::loopIndicesIn_fy_idx_skip_once;
bool testbench::loopIndicesIn_fy_idx_skip_noerr;
int  testbench::loopIndicesIn_fy_idx_array_comp_first;
int  testbench::loopIndicesIn_fy_idx_array_comp_last;
mc_wait_ctrl testbench::loopIndicesIn_fy_idx_wait_ctrl;
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
void testbench::exec_run( ac_channel<PackedInt<8UL, 16UL > > &input,  ac_channel<PackedInt<8UL, 16UL > > &weight,  ac_channel<PackedInt<16UL, 16UL > > &output,  ac_channel<Params > &paramsIn,  ac_channel<LoopIndices > &loopIndicesIn) {
   return mc_testbench::exec_run(input, weight, output, paramsIn, loopIndicesIn);
}
#endif

// ============================================
// Function: wait_for_idle_sync
// --------------------------------------------

void mc_testbench::wait_for_idle_sync()
{
   if (testbench::enable_idle_sync_mode) {
      std::cout << "mc_testbench STOPPING   @ " << sc_time_stamp() << std::endl;
      that->cpp_testbench_active.write(false);
      while (that->design_is_idle.read())  that->wait(that->design_is_idle.value_changed_event());
      while (!that->design_is_idle.read()) that->wait(that->design_is_idle.value_changed_event());
      that->cpp_testbench_active.write(true);
      std::cout << "mc_testbench CONTINUING @ " << sc_time_stamp() << std::endl;
   } else {
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: set_enable_stalls
// --------------------------------------------

void mc_testbench::set_enable_stalls(bool flag)
{
   if (flag) {
     std::cout << "Enabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_1);
   } else {
     std::cout << "Disabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_0);
   }
}
// ============================================
// Function: reset_request
// --------------------------------------------

void mc_testbench::reset_request()
{
   reset_request_event.notify(0,SC_NS);
}
// ============================================
// Function: capture_input
// --------------------------------------------

void mc_testbench::capture_input( ac_channel<PackedInt<8UL, 16UL > > &input)
{
   static mgc_sysc_ver_array1D<ac_int<8, true >,16> input_value_tmp;
   static int last_j_input_value_in = 0;
   if (input_value_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_input_value && !testbench::input_value_ignore)
   {
      int cur_iter = input_value_capture_count;
      ++input_value_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_input_value;
      while (ccs_scv_i < input.ac_channel<PackedInt<8UL, 16UL > >::debug_size()) {
         for (ccs_scv_j = last_j_input_value_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < input.ac_channel<PackedInt<8UL, 16UL > >::debug_size()) {
               int input_linear_idx = 0;
               for (int input_idx_0 = 0; input_idx_0 < 16; ++input_idx_0)
                  input_value_tmp[input_linear_idx++] = input.ac_channel<PackedInt<8UL, 16UL > >::chan[ccs_scv_i].PackedInt<8UL, 16UL >::value[input_idx_0];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_input_value->put(input_value_tmp);
            last_j_input_value_in = 0;
            input_value_capture_count += chan_factor;
         } else {
            last_j_input_value_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("input_value",testbench::input_value_wait_ctrl,ccs_wait_ctrl_input_value.operator->(),cur_iter,input_value_capture_count,1);
   }
   testbench::input_value_ignore = false;
}
// ============================================
// Function: capture_weight
// --------------------------------------------

void mc_testbench::capture_weight( ac_channel<PackedInt<8UL, 16UL > > &weight)
{
   static mgc_sysc_ver_array1D<ac_int<8, true >,16> weight_value_tmp;
   static int last_j_weight_value_in = 0;
   if (weight_value_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_weight_value && !testbench::weight_value_ignore)
   {
      int cur_iter = weight_value_capture_count;
      ++weight_value_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_weight_value;
      while (ccs_scv_i < weight.ac_channel<PackedInt<8UL, 16UL > >::debug_size()) {
         for (ccs_scv_j = last_j_weight_value_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < weight.ac_channel<PackedInt<8UL, 16UL > >::debug_size()) {
               int weight_linear_idx = 0;
               for (int weight_idx_0 = 0; weight_idx_0 < 16; ++weight_idx_0)
                  weight_value_tmp[weight_linear_idx++] = weight.ac_channel<PackedInt<8UL, 16UL > >::chan[ccs_scv_i].PackedInt<8UL, 16UL >::value[weight_idx_0];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_weight_value->put(weight_value_tmp);
            last_j_weight_value_in = 0;
            weight_value_capture_count += chan_factor;
         } else {
            last_j_weight_value_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("weight_value",testbench::weight_value_wait_ctrl,ccs_wait_ctrl_weight_value.operator->(),cur_iter,weight_value_capture_count,1);
   }
   testbench::weight_value_ignore = false;
}
// ============================================
// Function: capture_output
// --------------------------------------------

void mc_testbench::capture_output( ac_channel<PackedInt<16UL, 16UL > > &output)
{
   static mc_golden_info< mgc_sysc_ver_array1D<ac_int<16, true >,16>, ac_int<16, true > > output_value_tmp(testbench::output_value_ignore, false, output_value_iteration_count);
   output_value_tmp._ignore = testbench::output_value_ignore;
   output_value_tmp._iteration = output_value_iteration_count;
   output_value_tmp._data.mc_testbench_process_array_bounds("output_value",testbench::output_value_array_comp_first,testbench::output_value_array_comp_last,15,0);
   // BEGIN: testbench output_mask control for field_name output_value
   if ( testbench::output_value_use_mask ) {
      output_value_tmp._use_mask = true;
      output_value_tmp._mask = testbench::output_value_output_mask ;
   }
   // END: testbench output_mask control for field_name output_value
   static int last_j_output_value_out = 0;
   if (_capture_output_value)
   {
      int cur_iter = output_value_capture_count;
      ++output_value_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_output_value_golden;
      while (ccs_scv_i < output.ac_channel<PackedInt<16UL, 16UL > >::debug_size()) {
         for (ccs_scv_j = last_j_output_value_out; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < output.ac_channel<PackedInt<16UL, 16UL > >::debug_size()) {
               int output_linear_idx = 0;
               for (int output_idx_0 = 0; output_idx_0 < 16; ++output_idx_0)
                  output_value_tmp._data[output_linear_idx++] = output.ac_channel<PackedInt<16UL, 16UL > >::chan[ccs_scv_i].PackedInt<16UL, 16UL >::value[output_idx_0];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            output_value_golden.put(output_value_tmp);
            last_j_output_value_out = 0;
            output_value_capture_count += chan_factor;
         } else {
            last_j_output_value_out = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("output_value",testbench::output_value_wait_ctrl,ccs_wait_ctrl_output_value.operator->(),cur_iter,output_value_capture_count,1);
      testbench::output_value_use_mask = false;
   }
   testbench::output_value_ignore = false;
   testbench::output_value_skip = false;
}
// ============================================
// Function: capture_paramsIn
// --------------------------------------------

void mc_testbench::capture_paramsIn( ac_channel<Params > &paramsIn)
{
   static ac_int<16, false > paramsIn_OY1_tmp;
   static int last_j_paramsIn_OY1_in = 0;
   if (paramsIn_OY1_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_paramsIn_OY1 && !testbench::paramsIn_OY1_ignore)
   {
      int cur_iter = paramsIn_OY1_capture_count;
      ++paramsIn_OY1_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_OY1;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_OY1_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_OY1_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::OY1;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_OY1->put(paramsIn_OY1_tmp);
            last_j_paramsIn_OY1_in = 0;
            paramsIn_OY1_capture_count += chan_factor;
         } else {
            last_j_paramsIn_OY1_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_OY1",testbench::paramsIn_OY1_wait_ctrl,ccs_wait_ctrl_paramsIn_OY1.operator->(),cur_iter,paramsIn_OY1_capture_count,1);
   }
   testbench::paramsIn_OY1_ignore = false;
   static ac_int<16, false > paramsIn_OX1_tmp;
   static int last_j_paramsIn_OX1_in = 0;
   if (_capture_paramsIn_OX1 && !testbench::paramsIn_OX1_ignore)
   {
      int cur_iter = paramsIn_OX1_capture_count;
      ++paramsIn_OX1_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_OX1;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_OX1_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_OX1_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::OX1;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_OX1->put(paramsIn_OX1_tmp);
            last_j_paramsIn_OX1_in = 0;
            paramsIn_OX1_capture_count += chan_factor;
         } else {
            last_j_paramsIn_OX1_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_OX1",testbench::paramsIn_OX1_wait_ctrl,ccs_wait_ctrl_paramsIn_OX1.operator->(),cur_iter,paramsIn_OX1_capture_count,1);
   }
   testbench::paramsIn_OX1_ignore = false;
   static ac_int<16, false > paramsIn_OY0_tmp;
   static int last_j_paramsIn_OY0_in = 0;
   if (_capture_paramsIn_OY0 && !testbench::paramsIn_OY0_ignore)
   {
      int cur_iter = paramsIn_OY0_capture_count;
      ++paramsIn_OY0_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_OY0;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_OY0_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_OY0_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::OY0;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_OY0->put(paramsIn_OY0_tmp);
            last_j_paramsIn_OY0_in = 0;
            paramsIn_OY0_capture_count += chan_factor;
         } else {
            last_j_paramsIn_OY0_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_OY0",testbench::paramsIn_OY0_wait_ctrl,ccs_wait_ctrl_paramsIn_OY0.operator->(),cur_iter,paramsIn_OY0_capture_count,1);
   }
   testbench::paramsIn_OY0_ignore = false;
   static ac_int<16, false > paramsIn_OX0_tmp;
   static int last_j_paramsIn_OX0_in = 0;
   if (_capture_paramsIn_OX0 && !testbench::paramsIn_OX0_ignore)
   {
      int cur_iter = paramsIn_OX0_capture_count;
      ++paramsIn_OX0_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_OX0;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_OX0_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_OX0_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::OX0;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_OX0->put(paramsIn_OX0_tmp);
            last_j_paramsIn_OX0_in = 0;
            paramsIn_OX0_capture_count += chan_factor;
         } else {
            last_j_paramsIn_OX0_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_OX0",testbench::paramsIn_OX0_wait_ctrl,ccs_wait_ctrl_paramsIn_OX0.operator->(),cur_iter,paramsIn_OX0_capture_count,1);
   }
   testbench::paramsIn_OX0_ignore = false;
   static ac_int<16, false > paramsIn_OC1_tmp;
   static int last_j_paramsIn_OC1_in = 0;
   if (_capture_paramsIn_OC1 && !testbench::paramsIn_OC1_ignore)
   {
      int cur_iter = paramsIn_OC1_capture_count;
      ++paramsIn_OC1_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_OC1;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_OC1_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_OC1_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::OC1;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_OC1->put(paramsIn_OC1_tmp);
            last_j_paramsIn_OC1_in = 0;
            paramsIn_OC1_capture_count += chan_factor;
         } else {
            last_j_paramsIn_OC1_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_OC1",testbench::paramsIn_OC1_wait_ctrl,ccs_wait_ctrl_paramsIn_OC1.operator->(),cur_iter,paramsIn_OC1_capture_count,1);
   }
   testbench::paramsIn_OC1_ignore = false;
   static ac_int<16, false > paramsIn_IC1_tmp;
   static int last_j_paramsIn_IC1_in = 0;
   if (_capture_paramsIn_IC1 && !testbench::paramsIn_IC1_ignore)
   {
      int cur_iter = paramsIn_IC1_capture_count;
      ++paramsIn_IC1_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_IC1;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_IC1_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_IC1_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::IC1;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_IC1->put(paramsIn_IC1_tmp);
            last_j_paramsIn_IC1_in = 0;
            paramsIn_IC1_capture_count += chan_factor;
         } else {
            last_j_paramsIn_IC1_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_IC1",testbench::paramsIn_IC1_wait_ctrl,ccs_wait_ctrl_paramsIn_IC1.operator->(),cur_iter,paramsIn_IC1_capture_count,1);
   }
   testbench::paramsIn_IC1_ignore = false;
   static ac_int<16, false > paramsIn_FX_tmp;
   static int last_j_paramsIn_FX_in = 0;
   if (_capture_paramsIn_FX && !testbench::paramsIn_FX_ignore)
   {
      int cur_iter = paramsIn_FX_capture_count;
      ++paramsIn_FX_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_FX;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_FX_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_FX_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::FX;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_FX->put(paramsIn_FX_tmp);
            last_j_paramsIn_FX_in = 0;
            paramsIn_FX_capture_count += chan_factor;
         } else {
            last_j_paramsIn_FX_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_FX",testbench::paramsIn_FX_wait_ctrl,ccs_wait_ctrl_paramsIn_FX.operator->(),cur_iter,paramsIn_FX_capture_count,1);
   }
   testbench::paramsIn_FX_ignore = false;
   static ac_int<16, false > paramsIn_FY_tmp;
   static int last_j_paramsIn_FY_in = 0;
   if (_capture_paramsIn_FY && !testbench::paramsIn_FY_ignore)
   {
      int cur_iter = paramsIn_FY_capture_count;
      ++paramsIn_FY_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_FY;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_FY_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_FY_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::FY;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_FY->put(paramsIn_FY_tmp);
            last_j_paramsIn_FY_in = 0;
            paramsIn_FY_capture_count += chan_factor;
         } else {
            last_j_paramsIn_FY_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_FY",testbench::paramsIn_FY_wait_ctrl,ccs_wait_ctrl_paramsIn_FY.operator->(),cur_iter,paramsIn_FY_capture_count,1);
   }
   testbench::paramsIn_FY_ignore = false;
   static ac_int<16, false > paramsIn_STRIDE_tmp;
   static int last_j_paramsIn_STRIDE_in = 0;
   if (_capture_paramsIn_STRIDE && !testbench::paramsIn_STRIDE_ignore)
   {
      int cur_iter = paramsIn_STRIDE_capture_count;
      ++paramsIn_STRIDE_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_paramsIn_STRIDE;
      while (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
         for (ccs_scv_j = last_j_paramsIn_STRIDE_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < paramsIn.ac_channel<Params >::debug_size()) {
               paramsIn_STRIDE_tmp = paramsIn.ac_channel<Params >::chan[ccs_scv_i].Params::STRIDE;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_paramsIn_STRIDE->put(paramsIn_STRIDE_tmp);
            last_j_paramsIn_STRIDE_in = 0;
            paramsIn_STRIDE_capture_count += chan_factor;
         } else {
            last_j_paramsIn_STRIDE_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("paramsIn_STRIDE",testbench::paramsIn_STRIDE_wait_ctrl,ccs_wait_ctrl_paramsIn_STRIDE.operator->(),cur_iter,paramsIn_STRIDE_capture_count,1);
   }
   testbench::paramsIn_STRIDE_ignore = false;
}
// ============================================
// Function: capture_loopIndicesIn
// --------------------------------------------

void mc_testbench::capture_loopIndicesIn( ac_channel<LoopIndices > &loopIndicesIn)
{
   static ac_int<16, false > loopIndicesIn_ic1_idx_tmp;
   static int last_j_loopIndicesIn_ic1_idx_in = 0;
   if (loopIndicesIn_ic1_idx_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_loopIndicesIn_ic1_idx && !testbench::loopIndicesIn_ic1_idx_ignore)
   {
      int cur_iter = loopIndicesIn_ic1_idx_capture_count;
      ++loopIndicesIn_ic1_idx_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_loopIndicesIn_ic1_idx;
      while (ccs_scv_i < loopIndicesIn.ac_channel<LoopIndices >::debug_size()) {
         for (ccs_scv_j = last_j_loopIndicesIn_ic1_idx_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < loopIndicesIn.ac_channel<LoopIndices >::debug_size()) {
               loopIndicesIn_ic1_idx_tmp = loopIndicesIn.ac_channel<LoopIndices >::chan[ccs_scv_i].LoopIndices::ic1_idx;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_loopIndicesIn_ic1_idx->put(loopIndicesIn_ic1_idx_tmp);
            last_j_loopIndicesIn_ic1_idx_in = 0;
            loopIndicesIn_ic1_idx_capture_count += chan_factor;
         } else {
            last_j_loopIndicesIn_ic1_idx_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("loopIndicesIn_ic1_idx",testbench::loopIndicesIn_ic1_idx_wait_ctrl,ccs_wait_ctrl_loopIndicesIn_ic1_idx.operator->(),cur_iter,loopIndicesIn_ic1_idx_capture_count,1);
   }
   testbench::loopIndicesIn_ic1_idx_ignore = false;
   static ac_int<16, false > loopIndicesIn_fx_idx_tmp;
   static int last_j_loopIndicesIn_fx_idx_in = 0;
   if (_capture_loopIndicesIn_fx_idx && !testbench::loopIndicesIn_fx_idx_ignore)
   {
      int cur_iter = loopIndicesIn_fx_idx_capture_count;
      ++loopIndicesIn_fx_idx_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_loopIndicesIn_fx_idx;
      while (ccs_scv_i < loopIndicesIn.ac_channel<LoopIndices >::debug_size()) {
         for (ccs_scv_j = last_j_loopIndicesIn_fx_idx_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < loopIndicesIn.ac_channel<LoopIndices >::debug_size()) {
               loopIndicesIn_fx_idx_tmp = loopIndicesIn.ac_channel<LoopIndices >::chan[ccs_scv_i].LoopIndices::fx_idx;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_loopIndicesIn_fx_idx->put(loopIndicesIn_fx_idx_tmp);
            last_j_loopIndicesIn_fx_idx_in = 0;
            loopIndicesIn_fx_idx_capture_count += chan_factor;
         } else {
            last_j_loopIndicesIn_fx_idx_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("loopIndicesIn_fx_idx",testbench::loopIndicesIn_fx_idx_wait_ctrl,ccs_wait_ctrl_loopIndicesIn_fx_idx.operator->(),cur_iter,loopIndicesIn_fx_idx_capture_count,1);
   }
   testbench::loopIndicesIn_fx_idx_ignore = false;
   static ac_int<16, false > loopIndicesIn_fy_idx_tmp;
   static int last_j_loopIndicesIn_fy_idx_in = 0;
   if (_capture_loopIndicesIn_fy_idx && !testbench::loopIndicesIn_fy_idx_ignore)
   {
      int cur_iter = loopIndicesIn_fy_idx_capture_count;
      ++loopIndicesIn_fy_idx_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_loopIndicesIn_fy_idx;
      while (ccs_scv_i < loopIndicesIn.ac_channel<LoopIndices >::debug_size()) {
         for (ccs_scv_j = last_j_loopIndicesIn_fy_idx_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < loopIndicesIn.ac_channel<LoopIndices >::debug_size()) {
               loopIndicesIn_fy_idx_tmp = loopIndicesIn.ac_channel<LoopIndices >::chan[ccs_scv_i].LoopIndices::fy_idx;
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_loopIndicesIn_fy_idx->put(loopIndicesIn_fy_idx_tmp);
            last_j_loopIndicesIn_fy_idx_in = 0;
            loopIndicesIn_fy_idx_capture_count += chan_factor;
         } else {
            last_j_loopIndicesIn_fy_idx_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("loopIndicesIn_fy_idx",testbench::loopIndicesIn_fy_idx_wait_ctrl,ccs_wait_ctrl_loopIndicesIn_fy_idx.operator->(),cur_iter,loopIndicesIn_fy_idx_capture_count,1);
   }
   testbench::loopIndicesIn_fy_idx_ignore = false;
}
// ============================================
// Function: wait_on_input_required
// --------------------------------------------

void mc_testbench::wait_on_input_required()
{
   ++wait_cnt;
   wait(SC_ZERO_TIME); // get fifos a chance to update
   while (atleast_one_active_input) {
      if (_capture_input_value && ccs_input_value->used() == 0) return;
      if (_capture_weight_value && ccs_weight_value->used() == 0) return;
      if (_capture_paramsIn_OY1 && ccs_paramsIn_OY1->used() == 0) return;
      if (_capture_paramsIn_OX1 && ccs_paramsIn_OX1->used() == 0) return;
      if (_capture_paramsIn_OY0 && ccs_paramsIn_OY0->used() == 0) return;
      if (_capture_paramsIn_OX0 && ccs_paramsIn_OX0->used() == 0) return;
      if (_capture_paramsIn_OC1 && ccs_paramsIn_OC1->used() == 0) return;
      if (_capture_paramsIn_IC1 && ccs_paramsIn_IC1->used() == 0) return;
      if (_capture_paramsIn_FX && ccs_paramsIn_FX->used() == 0) return;
      if (_capture_paramsIn_FY && ccs_paramsIn_FY->used() == 0) return;
      if (_capture_paramsIn_STRIDE && ccs_paramsIn_STRIDE->used() == 0) return;
      if (_capture_loopIndicesIn_ic1_idx && ccs_loopIndicesIn_ic1_idx->used() == 0) return;
      if (_capture_loopIndicesIn_fx_idx && ccs_loopIndicesIn_fx_idx->used() == 0) return;
      if (_capture_loopIndicesIn_fy_idx && ccs_loopIndicesIn_fy_idx->used() == 0) return;
      that->cpp_testbench_active.write(false);
      wait(ccs_input_value->ok_to_put() | ccs_weight_value->ok_to_put() | ccs_paramsIn_OY1->ok_to_put() | ccs_paramsIn_OX1->ok_to_put() | ccs_paramsIn_OY0->ok_to_put() | ccs_paramsIn_OX0->ok_to_put() | ccs_paramsIn_OC1->ok_to_put() | ccs_paramsIn_IC1->ok_to_put() | ccs_paramsIn_FX->ok_to_put() | ccs_paramsIn_FY->ok_to_put() | ccs_paramsIn_STRIDE->ok_to_put() | ccs_loopIndicesIn_ic1_idx->ok_to_put() | ccs_loopIndicesIn_fx_idx->ok_to_put() | ccs_loopIndicesIn_fy_idx->ok_to_put());
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: capture_IN
// --------------------------------------------

void mc_testbench::capture_IN( ac_channel<PackedInt<8UL, 16UL > > &input,  ac_channel<PackedInt<8UL, 16UL > > &weight,  ac_channel<PackedInt<16UL, 16UL > > &output,  ac_channel<Params > &paramsIn,  ac_channel<LoopIndices > &loopIndicesIn)
{
   that->capture_input(input);
   that->capture_weight(weight);
   that->remaining_output_value_golden =  output.ac_channel<PackedInt<16UL, 16UL > >::debug_size();
   that->capture_paramsIn(paramsIn);
   that->capture_loopIndicesIn(loopIndicesIn);
}
// ============================================
// Function: capture_OUT
// --------------------------------------------

void mc_testbench::capture_OUT( ac_channel<PackedInt<8UL, 16UL > > &input,  ac_channel<PackedInt<8UL, 16UL > > &weight,  ac_channel<PackedInt<16UL, 16UL > > &output,  ac_channel<Params > &paramsIn,  ac_channel<LoopIndices > &loopIndicesIn)
{
   that->remaining_ccs_input_value =  input.ac_channel<PackedInt<8UL, 16UL > >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_input_value != 0) {
      cout << "Warning: Testbench input channel 'input' not empty. Remaining size: " << that->remaining_ccs_input_value << endl;
   }
   that->remaining_ccs_weight_value =  weight.ac_channel<PackedInt<8UL, 16UL > >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_weight_value != 0) {
      cout << "Warning: Testbench input channel 'weight' not empty. Remaining size: " << that->remaining_ccs_weight_value << endl;
   }
   that->capture_output(output);
   that->remaining_ccs_paramsIn_OY1 =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_OY1 != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_OY1 << endl;
   }
   that->remaining_ccs_paramsIn_OX1 =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_OX1 != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_OX1 << endl;
   }
   that->remaining_ccs_paramsIn_OY0 =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_OY0 != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_OY0 << endl;
   }
   that->remaining_ccs_paramsIn_OX0 =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_OX0 != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_OX0 << endl;
   }
   that->remaining_ccs_paramsIn_OC1 =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_OC1 != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_OC1 << endl;
   }
   that->remaining_ccs_paramsIn_IC1 =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_IC1 != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_IC1 << endl;
   }
   that->remaining_ccs_paramsIn_FX =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_FX != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_FX << endl;
   }
   that->remaining_ccs_paramsIn_FY =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_FY != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_FY << endl;
   }
   that->remaining_ccs_paramsIn_STRIDE =  paramsIn.ac_channel<Params >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_paramsIn_STRIDE != 0) {
      cout << "Warning: Testbench input channel 'paramsIn' not empty. Remaining size: " << that->remaining_ccs_paramsIn_STRIDE << endl;
   }
   that->remaining_ccs_loopIndicesIn_ic1_idx =  loopIndicesIn.ac_channel<LoopIndices >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_loopIndicesIn_ic1_idx != 0) {
      cout << "Warning: Testbench input channel 'loopIndicesIn' not empty. Remaining size: " << that->remaining_ccs_loopIndicesIn_ic1_idx << endl;
   }
   that->remaining_ccs_loopIndicesIn_fx_idx =  loopIndicesIn.ac_channel<LoopIndices >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_loopIndicesIn_fx_idx != 0) {
      cout << "Warning: Testbench input channel 'loopIndicesIn' not empty. Remaining size: " << that->remaining_ccs_loopIndicesIn_fx_idx << endl;
   }
   that->remaining_ccs_loopIndicesIn_fy_idx =  loopIndicesIn.ac_channel<LoopIndices >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_loopIndicesIn_fy_idx != 0) {
      cout << "Warning: Testbench input channel 'loopIndicesIn' not empty. Remaining size: " << that->remaining_ccs_loopIndicesIn_fy_idx << endl;
   }
}
// ============================================
// Function: exec_run
// --------------------------------------------

void mc_testbench::exec_run( ac_channel<PackedInt<8UL, 16UL > > &input,  ac_channel<PackedInt<8UL, 16UL > > &weight,  ac_channel<PackedInt<16UL, 16UL > > &output,  ac_channel<Params > &paramsIn,  ac_channel<LoopIndices > &loopIndicesIn)
{
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   that->cpp_testbench_active.write(true);
   capture_IN(input, weight, output, paramsIn, loopIndicesIn);
   SystolicArrayCore<IDTYPE, WDTYPE, ODTYPE, 16, 16>::run(input, weight, output, paramsIn, loopIndicesIn);
   // throttle ac_channel based on number of calls to chan::size() or chan::empty() or chan::nb_read() (but not chan::available()) 
   if (1) {
      int cnt=0;
      if (cnt) std::cout << "mc_testbench.cpp: CONTINUES @ " << sc_time_stamp() << std::endl;
      if (cnt) that->cpp_testbench_active.write(true);
   }
   capture_OUT(input, weight, output, paramsIn, loopIndicesIn);
   #else
   #endif
}
// ============================================
// Function: start_of_simulation
// --------------------------------------------

void mc_testbench::start_of_simulation()
{
   set_enable_stalls(false);
}
// ============================================
// Function: end_of_simulation
// --------------------------------------------

void mc_testbench::end_of_simulation()
{
   if (!_checked_results) {
      SC_REPORT_INFO(name(), "Simulation ran into deadlock");
      check_results();
   }
}
// ============================================
// Function: check_results
// --------------------------------------------

void mc_testbench::check_results()
{
   if (_checked_results) return;
   _checked_results = true;
   cout<<endl;
   cout<<"Checking results"<<endl;
   if (main_exit_code) _failed = true;
   int _num_outputs_checked = 0;
   bool _has_capture_counts = false;
   std::ostringstream mctb_msg;
   
   if (!_capture_output_value) {
      cout<<"'output_value' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      _failed |= output_value_comp->check_results(output_value_capture_count,testbench::output_value_skip_noerr);
      _has_capture_counts |= !!(output_value_capture_count);
   }
   cout<<endl;
   if (_num_outputs_checked == 0) {
      cout<<"Error: All outputs were optimized away. No output values were compared."<<endl;
      _failed = _failed || (_num_outputs_checked == 0);
   }
   if (!_has_capture_counts) {
      cout<<"Error: Nothing to compare, all output capture counts are zero."<<endl;
      _failed = true;
   }
   if (main_exit_code) cout << "Error: C++ Testbench 'main()' returned a non-zero exit code ("<<main_exit_code<<"). Check your testbench." <<endl;
   mctb_msg.clear();
   if (_failed) mctb_msg << "Simulation FAILED";
   else         mctb_msg << "Simulation PASSED";
   mctb_msg << " @ " << sc_time_stamp();
   SC_REPORT_INFO(this->name(), mctb_msg.str().c_str());
}
// ============================================
// Function: failed
// --------------------------------------------

bool mc_testbench::failed()
{
   return _failed;
}
// ============================================
// Function: set_failed
// --------------------------------------------

void mc_testbench::set_failed(bool fail)
{
   _failed = fail;
}
// ---------------------------------------------------------------
// Process: SC_METHOD wait_for_end
// Static sensitivity: sensitive << clk.pos() << testbench_end_event;

void mc_testbench::wait_for_end() {
   // If run() has not finished, we do nothing here
   if (!testbench_ended) return;
   // check for completed outputs
   if (output_value_comp->get_compare_count() < output_value_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   // If we made it here, all outputs have flushed. Check the results
   SC_REPORT_INFO(name(), "Simulation completed");
   check_results();
   sc_stop();
}
// ---------------------------------------------------------------
// Process: SC_THREAD run
// Static sensitivity: 

void mc_testbench::run() {
   testbench::enable_idle_sync_mode = false;
   testbench::idle_sync_stable_cycles = 1;
   testbench::input_value_ignore = false;
   testbench::input_value_skip = false;
   testbench::input_value_skip_quiet = false;
   testbench::input_value_skip_once = false;
   testbench::input_value_skip_noerr = false;
   testbench::input_value_array_comp_first = -1;
   testbench::input_value_array_comp_last = -1;
   testbench::input_value_wait_ctrl.clear();
   input_value_capture_count = 0;
   input_value_iteration_count = 0;
   testbench::weight_value_ignore = false;
   testbench::weight_value_skip = false;
   testbench::weight_value_skip_quiet = false;
   testbench::weight_value_skip_once = false;
   testbench::weight_value_skip_noerr = false;
   testbench::weight_value_array_comp_first = -1;
   testbench::weight_value_array_comp_last = -1;
   testbench::weight_value_wait_ctrl.clear();
   weight_value_capture_count = 0;
   weight_value_iteration_count = 0;
   testbench::output_value_ignore = false;
   testbench::output_value_skip = false;
   testbench::output_value_skip_quiet = false;
   testbench::output_value_skip_once = false;
   testbench::output_value_skip_noerr = false;
   testbench::output_value_array_comp_first = -1;
   testbench::output_value_array_comp_last = -1;
   testbench::output_value_use_mask = false;
   testbench::output_value_output_mask = ~0;
   testbench::output_value_wait_ctrl.clear();
   output_value_capture_count = 0;
   output_value_iteration_count = 0;
   testbench::paramsIn_OY1_ignore = false;
   testbench::paramsIn_OY1_skip = false;
   testbench::paramsIn_OY1_skip_quiet = false;
   testbench::paramsIn_OY1_skip_once = false;
   testbench::paramsIn_OY1_skip_noerr = false;
   testbench::paramsIn_OY1_array_comp_first = -1;
   testbench::paramsIn_OY1_array_comp_last = -1;
   testbench::paramsIn_OY1_wait_ctrl.clear();
   paramsIn_OY1_capture_count = 0;
   paramsIn_OY1_iteration_count = 0;
   testbench::paramsIn_OX1_ignore = false;
   testbench::paramsIn_OX1_skip = false;
   testbench::paramsIn_OX1_skip_quiet = false;
   testbench::paramsIn_OX1_skip_once = false;
   testbench::paramsIn_OX1_skip_noerr = false;
   testbench::paramsIn_OX1_array_comp_first = -1;
   testbench::paramsIn_OX1_array_comp_last = -1;
   testbench::paramsIn_OX1_wait_ctrl.clear();
   paramsIn_OX1_capture_count = 0;
   paramsIn_OX1_iteration_count = 0;
   testbench::paramsIn_OY0_ignore = false;
   testbench::paramsIn_OY0_skip = false;
   testbench::paramsIn_OY0_skip_quiet = false;
   testbench::paramsIn_OY0_skip_once = false;
   testbench::paramsIn_OY0_skip_noerr = false;
   testbench::paramsIn_OY0_array_comp_first = -1;
   testbench::paramsIn_OY0_array_comp_last = -1;
   testbench::paramsIn_OY0_wait_ctrl.clear();
   paramsIn_OY0_capture_count = 0;
   paramsIn_OY0_iteration_count = 0;
   testbench::paramsIn_OX0_ignore = false;
   testbench::paramsIn_OX0_skip = false;
   testbench::paramsIn_OX0_skip_quiet = false;
   testbench::paramsIn_OX0_skip_once = false;
   testbench::paramsIn_OX0_skip_noerr = false;
   testbench::paramsIn_OX0_array_comp_first = -1;
   testbench::paramsIn_OX0_array_comp_last = -1;
   testbench::paramsIn_OX0_wait_ctrl.clear();
   paramsIn_OX0_capture_count = 0;
   paramsIn_OX0_iteration_count = 0;
   testbench::paramsIn_OC1_ignore = false;
   testbench::paramsIn_OC1_skip = false;
   testbench::paramsIn_OC1_skip_quiet = false;
   testbench::paramsIn_OC1_skip_once = false;
   testbench::paramsIn_OC1_skip_noerr = false;
   testbench::paramsIn_OC1_array_comp_first = -1;
   testbench::paramsIn_OC1_array_comp_last = -1;
   testbench::paramsIn_OC1_wait_ctrl.clear();
   paramsIn_OC1_capture_count = 0;
   paramsIn_OC1_iteration_count = 0;
   testbench::paramsIn_IC1_ignore = false;
   testbench::paramsIn_IC1_skip = false;
   testbench::paramsIn_IC1_skip_quiet = false;
   testbench::paramsIn_IC1_skip_once = false;
   testbench::paramsIn_IC1_skip_noerr = false;
   testbench::paramsIn_IC1_array_comp_first = -1;
   testbench::paramsIn_IC1_array_comp_last = -1;
   testbench::paramsIn_IC1_wait_ctrl.clear();
   paramsIn_IC1_capture_count = 0;
   paramsIn_IC1_iteration_count = 0;
   testbench::paramsIn_FX_ignore = false;
   testbench::paramsIn_FX_skip = false;
   testbench::paramsIn_FX_skip_quiet = false;
   testbench::paramsIn_FX_skip_once = false;
   testbench::paramsIn_FX_skip_noerr = false;
   testbench::paramsIn_FX_array_comp_first = -1;
   testbench::paramsIn_FX_array_comp_last = -1;
   testbench::paramsIn_FX_wait_ctrl.clear();
   paramsIn_FX_capture_count = 0;
   paramsIn_FX_iteration_count = 0;
   testbench::paramsIn_FY_ignore = false;
   testbench::paramsIn_FY_skip = false;
   testbench::paramsIn_FY_skip_quiet = false;
   testbench::paramsIn_FY_skip_once = false;
   testbench::paramsIn_FY_skip_noerr = false;
   testbench::paramsIn_FY_array_comp_first = -1;
   testbench::paramsIn_FY_array_comp_last = -1;
   testbench::paramsIn_FY_wait_ctrl.clear();
   paramsIn_FY_capture_count = 0;
   paramsIn_FY_iteration_count = 0;
   testbench::paramsIn_STRIDE_ignore = false;
   testbench::paramsIn_STRIDE_skip = false;
   testbench::paramsIn_STRIDE_skip_quiet = false;
   testbench::paramsIn_STRIDE_skip_once = false;
   testbench::paramsIn_STRIDE_skip_noerr = false;
   testbench::paramsIn_STRIDE_array_comp_first = -1;
   testbench::paramsIn_STRIDE_array_comp_last = -1;
   testbench::paramsIn_STRIDE_wait_ctrl.clear();
   paramsIn_STRIDE_capture_count = 0;
   paramsIn_STRIDE_iteration_count = 0;
   testbench::loopIndicesIn_ic1_idx_ignore = false;
   testbench::loopIndicesIn_ic1_idx_skip = false;
   testbench::loopIndicesIn_ic1_idx_skip_quiet = false;
   testbench::loopIndicesIn_ic1_idx_skip_once = false;
   testbench::loopIndicesIn_ic1_idx_skip_noerr = false;
   testbench::loopIndicesIn_ic1_idx_array_comp_first = -1;
   testbench::loopIndicesIn_ic1_idx_array_comp_last = -1;
   testbench::loopIndicesIn_ic1_idx_wait_ctrl.clear();
   loopIndicesIn_ic1_idx_capture_count = 0;
   loopIndicesIn_ic1_idx_iteration_count = 0;
   testbench::loopIndicesIn_fx_idx_ignore = false;
   testbench::loopIndicesIn_fx_idx_skip = false;
   testbench::loopIndicesIn_fx_idx_skip_quiet = false;
   testbench::loopIndicesIn_fx_idx_skip_once = false;
   testbench::loopIndicesIn_fx_idx_skip_noerr = false;
   testbench::loopIndicesIn_fx_idx_array_comp_first = -1;
   testbench::loopIndicesIn_fx_idx_array_comp_last = -1;
   testbench::loopIndicesIn_fx_idx_wait_ctrl.clear();
   loopIndicesIn_fx_idx_capture_count = 0;
   loopIndicesIn_fx_idx_iteration_count = 0;
   testbench::loopIndicesIn_fy_idx_ignore = false;
   testbench::loopIndicesIn_fy_idx_skip = false;
   testbench::loopIndicesIn_fy_idx_skip_quiet = false;
   testbench::loopIndicesIn_fy_idx_skip_once = false;
   testbench::loopIndicesIn_fy_idx_skip_noerr = false;
   testbench::loopIndicesIn_fy_idx_array_comp_first = -1;
   testbench::loopIndicesIn_fy_idx_array_comp_last = -1;
   testbench::loopIndicesIn_fy_idx_wait_ctrl.clear();
   loopIndicesIn_fy_idx_capture_count = 0;
   loopIndicesIn_fy_idx_iteration_count = 0;
   testbench testbench_inst(sc_argc(), sc_argv());
   main_exit_code = testbench_inst.main();
   cout<<"Info: Execution of user-supplied C++ testbench 'main()' has completed with exit code = " << main_exit_code << endl;
   cout<<endl;
   cout<<"Info: Collecting data completed"<<endl;
   cout<<"   captured "<<input_value_capture_count<<" values of input_value"<<endl;
   cout<<"   captured "<<weight_value_capture_count<<" values of weight_value"<<endl;
   cout<<"   captured "<<output_value_capture_count<<" values of output_value"<<endl;
   cout<<"   captured "<<paramsIn_OY1_capture_count<<" values of paramsIn_OY1"<<endl;
   cout<<"   captured "<<paramsIn_OX1_capture_count<<" values of paramsIn_OX1"<<endl;
   cout<<"   captured "<<paramsIn_OY0_capture_count<<" values of paramsIn_OY0"<<endl;
   cout<<"   captured "<<paramsIn_OX0_capture_count<<" values of paramsIn_OX0"<<endl;
   cout<<"   captured "<<paramsIn_OC1_capture_count<<" values of paramsIn_OC1"<<endl;
   cout<<"   captured "<<paramsIn_IC1_capture_count<<" values of paramsIn_IC1"<<endl;
   cout<<"   captured "<<paramsIn_FX_capture_count<<" values of paramsIn_FX"<<endl;
   cout<<"   captured "<<paramsIn_FY_capture_count<<" values of paramsIn_FY"<<endl;
   cout<<"   captured "<<paramsIn_STRIDE_capture_count<<" values of paramsIn_STRIDE"<<endl;
   cout<<"   captured "<<loopIndicesIn_ic1_idx_capture_count<<" values of loopIndicesIn_ic1_idx"<<endl;
   cout<<"   captured "<<loopIndicesIn_fx_idx_capture_count<<" values of loopIndicesIn_fx_idx"<<endl;
   cout<<"   captured "<<loopIndicesIn_fy_idx_capture_count<<" values of loopIndicesIn_fy_idx"<<endl;
   testbench_ended = true;
   testbench_end_event.notify(SC_ZERO_TIME);
}
#ifdef CCS_SCVERIFY_USE_CCS_BLOCK
#include "ccs_block_macros.cpp"
#endif
